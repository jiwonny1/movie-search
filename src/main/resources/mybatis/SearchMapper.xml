<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="dev.moviesearch.app.search.mapper.SearchMapper">

    <select id="selectRecentSearch" parameterType="String" resultType="dev.moviesearch.app.search.domain.SearchLogDto">
        SELECT
            USER_ID, SEARCH_WORD, SEARCH_DATE
        FROM
            movie.SEARCH_LOG
        WHERE
        	USER_ID = #{userId}
       	ORDER BY
       		SEARCH_DATE DESC
       	LIMIT
       		20
    </select>
   	
    <delete id="deleteRecentSearch" parameterType="dev.moviesearch.app.search.domain.SearchLogDto">
    	DELETE
    	FROM
    		movie.SEARCH_LOG
    	WHERE
    		USER_ID = #{userId} AND SEARCH_WORD = #{searchWord}
    </delete>
    
    <insert id="insertRecentSearch" parameterType="dev.moviesearch.app.search.domain.SearchLogDto">
    	INSERT INTO movie.SEARCH_LOG
    	(
    		USER_ID, SEARCH_WORD, SEARCH_DATE
    	)
    	VALUES
    	<foreach collection="list" item="log" separator=" , ">
    		(
				#{log.userId}, #{log.searchWord}, now()
    		)
    	</foreach>
    	ON DUPLICATE KEY UPDATE
    	SEARCH_DATE = now()
    </insert>


	<select id="selectByTitle" parameterType="map" resultType="dev.moviesearch.app.movieapi.domain.MovieDto">
   		SELECT 
   			CONTENT_ID ID,
   			TITLE,
   			RELEASE_DATE,
   			POSTER_PATH,
   			OVERVIEW,
   			ORIGINAL_LANGUAGE,
   			POPULARITY,
   			VOTE_AVERAGE,
   			VOTE_COUNT
   		FROM
   			movie.CONTENT
   		<where>
   			<foreach collection="keywords" item="keyword" separator=" and ">
   				TITLE like concat('%', #{keyword}, '%')
   			</foreach>
   		</where>
   		ORDER BY
   			POPULARITY DESC
   		LIMIT
   			${(page * 20) - 20}, ${(page * 20) - 1}
   	</select>
   	
   	<select id="selectByPartOfTitle" parameterType="map" resultType="dev.moviesearch.app.movieapi.domain.MovieDto">
   		SELECT 
   			CONTENT_ID ID,
   			TITLE,
   			RELEASE_DATE,
   			POSTER_PATH,
   			OVERVIEW,
   			ORIGINAL_LANGUAGE,
   			POPULARITY,
   			VOTE_AVERAGE,
   			VOTE_COUNT
   		FROM
   			movie.CONTENT
   		WHERE
   			CONTENT_ID IN 
   				(
		   		SELECT 
		   			CONTENT_ID
		   		FROM
		   			movie.CONTENT
		   		<where>
		   			<foreach collection="keywords" item="keyword" separator=" or ">
		   				TITLE like concat('%', #{keyword}, '%')
		   			</foreach>
		   		</where>
		   		)
		   	AND
   			CONTENT_ID NOT IN 
		   		(
		   		SELECT 
		   			CONTENT_ID
		   		FROM
		   			movie.CONTENT
		   		<where>
		   			<foreach collection="keywords" item="keyword" separator=" and ">
		   				TITLE like concat('%', #{keyword}, '%')
		   			</foreach>
		   		</where>
		   		)
		ORDER BY
   			POPULARITY DESC
   		LIMIT
   			${(page * 20) - 20}, ${(page * 20) - 1}
   	</select>
   	
   	<select id="selectByKeyword" parameterType="map" resultType="dev.moviesearch.app.movieapi.domain.MovieDto">
   		SELECT 
   			C.CONTENT_ID ID,
   			C.TITLE,
   			C.RELEASE_DATE,
   			C.POSTER_PATH,
   			C.OVERVIEW,
   			C.ORIGINAL_LANGUAGE,
   			C.POPULARITY,
   			C.VOTE_AVERAGE,
   			C.VOTE_COUNT
   		FROM
   			movie.CONTENT C
   		WHERE
   			C.CONTENT_ID IN 
	   			(
	   			SELECT DISTINCT A.CONTENT_ID FROM 
					movie.KEYWORD A
				INNER JOIN
					(
					SELECT 
						CONTENT_ID, COUNT(CONTENT_ID) COUNT 
					FROM 
						movie.KEYWORD 
					WHERE 
						KEYWORD IN
						(
						<foreach collection="keywords" item="keyword" separator=" , ">
			   				#{keyword}
			   			</foreach>
						) 
					GROUP BY 
						CONTENT_ID 
					) B
				ON 
					B.CONTENT_ID = A.CONTENT_ID
				WHERE
					B.COUNT = ${keywords.size()}
				)
		ORDER BY
   			C.POPULARITY DESC
   		LIMIT
   			${(page * 20) - 20}, ${(page * 20) - 1}
   	</select>
   	
   	<select id="selectByHalfKeyword" parameterType="map" resultType="dev.moviesearch.app.movieapi.domain.MovieDto">
   		SELECT 
   			C.CONTENT_ID ID,
   			C.TITLE,
   			C.RELEASE_DATE,
   			C.POSTER_PATH,
   			C.OVERVIEW,
   			C.ORIGINAL_LANGUAGE,
   			C.POPULARITY,
   			C.VOTE_AVERAGE,
   			C.VOTE_COUNT
   		FROM
   			movie.CONTENT C
   		WHERE
   			C.CONTENT_ID IN 
	   			(
	   			SELECT DISTINCT A.CONTENT_ID FROM 
					movie.KEYWORD A
				INNER JOIN
					(
					SELECT 
						CONTENT_ID, COUNT(CONTENT_ID) COUNT 
					FROM 
						movie.KEYWORD 
					WHERE 
						KEYWORD IN
						(
						<foreach collection="keywords" item="keyword" separator=" , ">
			   				#{keyword}
			   			</foreach>
						) 
					GROUP BY 
						CONTENT_ID 
					) B
				ON 
					B.CONTENT_ID = A.CONTENT_ID
				WHERE
					B.COUNT <![CDATA[<]]>  ${keywords.size()}
				)
			AND
			C.CONTENT_ID NOT IN
				(
	   			SELECT DISTINCT A.CONTENT_ID FROM 
					movie.KEYWORD A
				INNER JOIN
					(
					SELECT 
						CONTENT_ID, COUNT(CONTENT_ID) COUNT 
					FROM 
						movie.KEYWORD 
					WHERE 
						KEYWORD IN
						(
						<foreach collection="keywords" item="keyword" separator=" , ">
			   				#{keyword}
			   			</foreach>
						) 
					GROUP BY 
						CONTENT_ID 
					) B
				ON 
					B.CONTENT_ID = A.CONTENT_ID
				WHERE
					B.COUNT = ${keywords.size()}
				)
		ORDER BY
   			C.POPULARITY DESC
   		LIMIT
   			${(page * 20) - 20}, ${(page * 20) - 1}
   	</select>
    

</mapper>
<!-- <![CDATA[<=]]> -->